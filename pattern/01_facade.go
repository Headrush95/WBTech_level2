package pattern

import "errors"

/*
Реализовать паттерн "Фасад", объяснить применимость паттерна, плюсы и минусы, а
также реальные примеры его использования на практике.
	https://en.wikipedia.org/wiki/Facade_pattern

Фасад — структурный паттерн проектирования, у которого есть простой интерфейс поведения к сложной системе объектов,
функций или фреймворку.

Применимость:
1) когда нужно предоставить простой или урезанный интерфейс к сложной системе/фреймворку;
2) когда нужно разложить систему на слои.

Плюсы:
- изолирует клиентов от компонентов системы;

Минусы:
- фасад рискует стать "божественным объектом", привязанным ко всем классам программы, но этого можно избежать, если делать
дополнительные фасады/суб-фасады;

Примеры:
1) Допустим, мы хотим приобрести какой-то товар в магазине и оплатить покупку по карте. Прислонив карту к терминалу мы,
по сути, взаимодействуем с фасадом банка. Т.е. условно, оплачивая мы вызываем метод фасада pay(), который в свою очередь
взаимодействует с интерфейсом банка и проверяет данные карты checkCard(), узнает есть ли у покупателя достаточное количество
средств hasEnoughMoney() и списывает их makePayment().
2) Фасадом можно также назвать пользовательский интерфейс: за нажатием одной кнопки может скрываться много различных
действий программы.

Реализация:
Допустим, мы хотим подключиться к базе данных. Для этого нам нужно получить конфиг, установить соединение с БД и проверить
его. Мы можем предоставить клиенту самому проделать все эти шаги, либо предоставить всего одну функцию, под капотом которой
все это уже реализовано.
*/

type Config struct {
}

// GetConfig "ищет" и возвращает конфиг для подключения к БД
func GetConfig() *Config {
	//происходит поиск файла конфига на диске
	//считываются данные с переменных окружения или из файла
	return &Config{}
}

type DataBase struct {
	conf *Config
}

// NewDataBaseConn возвращает указатель на соединение с БД
func NewDataBaseConn(conf *Config) *DataBase {
	return &DataBase{conf: conf}
}

// Ping проверяет работает ли соединение с БД
func (db *DataBase) Ping() bool {
	if db.conf == nil {
		return false
	}
	return true
}

// Connect в данном примере является фасадом - предоставляет упрощенный интерфейс для создания нового соединения с БД
func Connect() (*DataBase, error) {
	config := GetConfig()
	db := NewDataBaseConn(config)
	if !db.Ping() {
		return nil, errors.New("[DB error] can not establish a connection")
	}
	return db, nil
}
