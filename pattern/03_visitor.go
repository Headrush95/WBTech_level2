package pattern

/*
Реализовать паттерн "Посетитель", объяснить применимость паттерна, плюсы и минусы, а
также реальные примеры его использования на практике.

	https://en.wikipedia.org/wiki/Visitor_pattern

Посетитель - это поведенческий паттерн проектирования, который позволяет создавать новые операции, не меняя классы
объектов, над которыми эти операции могут выполняться.

Применимость:
1) когда нужно выполнить операцию над всеми элементами сложной структуры объектов;
2) когда над объектами сложной структуры объектов надо выполнять некоторые, не связанные между собой операции,
но мы не хотим засорять объекты такими операциями;
3) когда новое поведение имеет смысл только для некоторых классов из существующей иерархии.

Плюсы:
- упрощает добавление новых операций над всей связанной структурой объектов;
- объединяет родственные операции в одном классе;
- посетитель может накоплять состояние при обходе структуры компонентов.

Минусы:
- паттерн не оправдан, если иерархия компонентов часто меняется;
- может привести к нарушению инкапсуляции компонентов.

Примеры:
1) например, можно использовать для расчета зарплаты сотрудников. В структуре Посетителя будут прописаны методы для
расчета зарплаты для различных должностей сотрудников. У структур самих сотрудников появится метод, "говорящий" Посетителю
с каким именно сотрудником он имеет дело.

Реализация:
Допустим, у нас есть магазин одежды. В нем есть кофты, штаны, джинсы и куртки. Все они имеют поле размера. В текущей
версии у нас есть только размер для нашего рынка, но мы планируем выйти на международный рынок и размеры нужно давать уже
по другому. Для перевода одного размера к другому мы можем использовать посетителя, который в зависимости от типа вещи ее
размера будет назначать новый.
*/

// clothVisitor интерфейс Посетителя наших товаров (вещей)
type clothVisitor interface {
	visitSweater(s *sweater)
	visitPants(p *pants)
	visitJeans(js *jeans)
	visitJacket(jt *jacket)
}

// дальше описываем все товары и добавляем им метод accept(v visitor), который будет говорить посетителю с каким типом вещей
// он взаимодействует

type sweater struct {
	size int
}

func (s *sweater) accept(v clothVisitor) {
	v.visitSweater(s)
}

type pants struct {
	size int
}

func (p *pants) accept(v clothVisitor) {
	v.visitPants(p)
}

type jeans struct {
	size int
}

func (js *jeans) accept(v clothVisitor) {
	v.visitJeans(js)
}

type jacket struct {
	size int
}

func (jt *jacket) accept(v clothVisitor) {
	v.visitJacket(jt)
}

// changeClothSizeVisitor меняет размер одежды на международный
type changeClothSizeVisitor struct {
}

func (c changeClothSizeVisitor) visitSweater(s *sweater) {
	s.size += 10
}

func (c changeClothSizeVisitor) visitPants(p *pants) {
	p.size += 5
}

func (c changeClothSizeVisitor) visitJeans(js *jeans) {
	js.size += 20
}

func (c changeClothSizeVisitor) visitJacket(jt *jacket) {
	jt.size += 8
}
